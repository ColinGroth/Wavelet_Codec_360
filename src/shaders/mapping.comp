#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI 3.1415926535897932384626433832795

layout (local_size_x = 64) in;

float horizontal_fov = PI / 2.0;
float vertical_fov = PI / 2.0;

layout(binding = 0, rgba32f) uniform image2D full_frame;

layout(binding = 1, r32f) uniform image2D out_image;


vec4 rotateXY(float azimuth, float zenith, vec4 ray) {
  vec4 rotated;
  float as = sin(azimuth);
  float ac = cos(azimuth);
  float zs = sin(zenith);
  float zc = cos(zenith);

  rotated.x = ray.x * ac + ray.y * zs * as + ray.z * zc * as;
  rotated.y = ray.y * zc - ray.z * zs;
  rotated.z = -ray.x * as + ray.y * zs * ac + ray.z * zc * ac;

  return rotated;
}

ivec2 get_video_coord(ivec2 coord, ivec2 size) {
  bool rightEye = coord.x > size.x / 2.0;

  vec2 uv = vec2(coord) / vec2(size);
  uv.x -= (rightEye) ? .5 : .0;
  uv.x *= 2.0;
  vec2 uv_2 = uv * 2 - vec2(1.0);

  float horizontalFoV = PI / 2.0;
  float verticalFoV = PI / 2.0;
  vec3 ray = vec3(0, 0, 1.0);
  ray = rotateXY(horizontalFoV / 2.0, verticalFoV / 2.0, vec4(ray, 0.0)).xyz;
  ray = normalize(ray);

  ray.x = (1 - ray.z) * uv_2.x;
  ray.y = (1 - ray.z) * uv_2.y;

  ray = normalize(ray);
  
  // spherical mapping
  float asy = asin(-ray.y);
  vec2 video_uv = vec2(0.5 + atan(ray.x, ray.z) / (2.0 * PI), 0.5 - asy / PI);

  // horizontal split
  video_uv.y /= 2.0;
  video_uv.y += (rightEye) ? .5 : .0;

  return ivec2(video_uv * vec2(size));
}

void main() {
  uint idx = gl_GlobalInvocationID.x;
  ivec2 size_in = imageSize(full_frame).xy;
  ivec2 size_out = imageSize(out_image).xy;
  
  if (idx > size_out.x * size_out.y) return;

  ivec2 coord = ivec2(int(idx % size_out.x), int(idx / size_out.x));
  vec2 ratio = vec2(size_in) / vec2(size_out);

  /// get the coordinate on the video image
  ivec2 video_coord = get_video_coord(ivec2(coord * ratio), size_in);
  
  /// extract the rgba value from the video frame and save to coord
  vec3 color = imageLoad(full_frame, video_coord).rgb;
  imageStore(out_image, coord, vec4(color, 1.0));
}
