#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 64) in;

layout(binding = 0, rgba32f) uniform image2D wavelet_img;

struct CompressedWavelet
{
    int index;
    int coefficients;
};

layout(binding = 1, std430) buffer Wavelet {
    CompressedWavelet wavelets[];
};

layout(binding = 2, std430) buffer Wavelet_Info {
    int offset;
    int total_size;
    int level_sizes[];
};

layout(binding = 3, std430) buffer Normalize {
    float minsMaxs[];
};

layout(push_constant) uniform PCData {
    int max_level;
    int interframe_level;
    int interframe_lvlIdx;
    int useInterframe;
    int showWavelets;
};


void main()
{
    uint idx = gl_GlobalInvocationID.x;

    if (idx >= total_size) return;

    CompressedWavelet wavelet = wavelets[idx + offset];
    int level = 0;
    for(int i = max_level - 1; i >= 0; --i){
        if(idx > level_sizes[i]){ break; }
        level += 1;
    }

    ivec2 size  = imageSize(wavelet_img).xy;
    ivec2 wsize = size >> level;
    int frame_idx = wavelet.index / (size.x * size.y);

    wavelet.index %= size.x * size.y;
    ivec2 coord = ivec2(int(wavelet.index % wsize.x), int(wavelet.index / wsize.x));

    int isWvltSide = 0;
    if (level < max_level){
        isWvltSide = 1;
    }

    vec3 data;
    for (int i = 0, coeff = wavelet.coefficients; i < 3; ++i, coeff >>= 8) { data[i] = coeff & 0xff; }
    data /= 255.f;

    int offset = 6 * isWvltSide + 12 * frame_idx;
    vec3 mins = vec3(minsMaxs[offset], minsMaxs[1 + offset], minsMaxs[2 + offset]);
    vec3 maxs = vec3(minsMaxs[3 + offset], minsMaxs[4 + offset], minsMaxs[5 + offset]);
    data = data * (maxs - mins) + mins;

    vec3 ret;

    if (interframe_level == 0){
        ret = data;
    } else {
        ret = imageLoad(wavelet_img, ivec2(coord)).rgb;
        int kernel = (interframe_lvlIdx % 2) * 2 - 1;
        ret += data * kernel;
    }

    if (useInterframe == 0){ //interface option
        ret = data;
    }

    if(showWavelets == 1){
        ret = vec3(1); //debug
    }
    imageStore(wavelet_img, coord, vec4(ret, 1));


}


